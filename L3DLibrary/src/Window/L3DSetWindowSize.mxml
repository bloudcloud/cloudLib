<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="146" height="122"
		 creationComplete="Init()">
	
	<fx:Script>
		<![CDATA[		
			import alternativa.engine3d.core.BoundBox;
			import alternativa.engine3d.core.Camera3D;
			import alternativa.engine3d.core.Object3D;
			import alternativa.engine3d.core.RayIntersectionData;
			import alternativa.engine3d.core.Resource;
			import alternativa.engine3d.core.VertexAttributes;
			import alternativa.engine3d.core.VertexStream;
			import alternativa.engine3d.core.View;
			import alternativa.engine3d.lights.OmniLight;
			import alternativa.engine3d.materials.FillMaterial;
			import alternativa.engine3d.materials.LightMapMaterial;
			import alternativa.engine3d.materials.Material;
			import alternativa.engine3d.materials.StandardMaterial;
			import alternativa.engine3d.materials.TextureMaterial;
			import alternativa.engine3d.objects.Mesh;
			import alternativa.engine3d.objects.Surface;
			import alternativa.engine3d.objects.WireFrame;
			import alternativa.engine3d.resources.BitmapTextureResource;
			import alternativa.engine3d.resources.Geometry;
			import alternativa.engine3d.resources.TextureResource;
			import alternativa.engine3d.utils.Object3DUtils;
			
			import flash.display.BitmapData;
			import flash.display.Loader;
			import flash.display.LoaderInfo;
			import flash.display.SimpleButton;
			import flash.display.Sprite;
			import flash.display.Stage3D;
			import flash.display.StageAlign;
			import flash.display.StageScaleMode;
			import flash.display3D.Context3D;
			import flash.display3D.Context3DRenderMode;
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.geom.Point;
			import flash.geom.Rectangle;
			import flash.geom.Vector3D;
			import flash.net.FileReference;
			import flash.net.URLLoader;
			import flash.net.URLLoaderDataFormat;
			import flash.net.URLRequest;
			import flash.text.*;
			import flash.text.TextField;
			import flash.ui.*;
			import flash.utils.ByteArray;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.core.DragSource;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.*;
			import mx.events.DragEvent;
			import mx.graphics.*;
			import mx.graphics.codec.JPEGEncoder;
			import mx.managers.*;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			public var completeFun:Function = null; 
			
			private function Init():void
			{	
				stage.scaleMode = StageScaleMode.NO_SCALE;
				stage.align = StageAlign.TOP_LEFT;	
			}
			
			public function get WindowLength():int
			{
				var v:int = 2000;
				try
				{
					v = v = int(parseFloat(WindowLengthInputText.text));
				}	
				catch(error:Error)
				{
					v = 2000;
				}
				
				if(v < 200)
				{
					v = 200;
				}
				else if(v > 6000)
				{
					v = 6000;
				}
				
				return v;
			}
			
			public function set WindowLength(v:int):void
			{
				if(v < 200)
				{
					v = 200;
				}
				else if(v > 6000)
				{
					v = 6000;
				}
				
				WindowLengthInputText.text = v.toString();
			}
			
			public function get WindowHeight():int
			{
				var v:int = 2000;
				try
				{
					v = v = int(parseFloat(WindowHeightInputText.text));
				}	
				catch(error:Error)
				{
					v = 2000;
				}
				
				if(v < 200)
				{
					v = 200;
				}
				else if(v > 6000)
				{
					v = 6000;
				}
				
				return v;
			}
			
			public function set WindowHeight(v:int):void
			{
				if(v < 200)
				{
					v = 200;
				}
				else if(v > 6000)
				{
					v = 6000;
				}
				
				WindowHeightInputText.text = v.toString();
			}
			
			protected function OKButton_clickHandler(event:MouseEvent):void
			{
				PopUpManager.removePopUp(this);
				if(completeFun != null)
				{
					completeFun(this);
				}
			}
			
			protected function ExitButton_clickHandler(event:MouseEvent):void
			{
				WindowLengthInputText.text = "2000";
				WindowHeightInputText.text = "2000";
				PopUpManager.removePopUp(this);
				if(completeFun != null)
				{
					completeFun(this);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Panel x="0" y="1" width="146" height="122" title="设置窗体尺寸">
		<s:Label x="10" y="10" text="窗体长度："/>
		<s:TextInput id="WindowLengthInputText" x="72" y="6" width="61" text="2000"/>
		<s:Label x="10" y="34" text="窗体高度："/>
		<s:TextInput id="WindowHeightInputText" x="72" y="30" width="61" text="2000"/>
		<s:Button id="OKButton" x="10" y="60" width="47" height="22" label="确定"
				  click="OKButton_clickHandler(event)"/>
		<s:Button id="ExitButton" x="87" y="60" width="47" height="22" label="退出"
				  click="ExitButton_clickHandler(event)"/>
	</s:Panel>
</s:Group>
