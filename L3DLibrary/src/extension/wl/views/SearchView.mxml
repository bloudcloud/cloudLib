<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="{viewWidth}"
		 creationComplete="group1_creationCompleteHandler(event)">
	<fx:Metadata>
		[Event(name="search", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import extension.wl.buttons.SvgButton;
			import extension.wl.globalData.allStaticTypes.SvgType;
			import extension.wl.models.SvgModel;
			import extension.wl.utils.MouseUtils;
			
			import mx.events.FlexEvent;
			
			public var typeStyle:int = 2;//默认风格
			public var typeStatus:int = 0;
			public var viewOut:uint = 0xffffff;
			public var viewAlpha:Number = 1;
			public var lineOut:uint = 0;
			public var lineAlpha:uint = 1;
			public var isShow:Boolean = false;
			public var model:SvgModel = null;
			
			[Bindable]
			public var viewWidth:int = 45;
			public var searchPrompt:String = "搜索";
			public var searchWidth:int = 200;
			public var searchSide:int = 30;
			public var searchGap:int = 5;
			
			public var searchType:int = SEARCH_SVG;//搜索按钮类型
			public var searchLayout:int = SEARCH_RIGHT;//搜索按钮布局，默认居右
			
			public static const SEARCH_LEFT:int = 1;//按钮居左
			public static const SEARCH_RIGHT:int = 2;//按钮居右
			
			public static const SEARCH_SVG:int = 1;//svg按钮类型
			public static const SEARCH_LABEL:int = 2;//label按钮类型
			public static const SEARCH_LABEL_SVG:int = 3;//label+svg按钮类型
			public static const SEARCH_SVG_LABEL:int = 4;//svg+label按钮类型
			
			[Bindable]
			public var topLeftRadius:Number = 0;
			[Bindable]
			public var topRightRadius:Number = 0;
			[Bindable]
			public var bottomLeftRadius:Number = 0;
			[Bindable]
			public var bottomRightRadius:Number = 0;
			
			private var input:InputView = null;
			private var svg:SvgButton = null;
			public static const SearchEvent:String = "search";
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				model = SvgType.getSvgModelFromEvent(SvgType.SEARCH_EVENT);
				viewWidth = searchSide + searchGap * 2;
				buildSearchView();
			}
			
			private function buildSearchView():void
			{
				svg = SvgButton.buildSvgButton(SvgType.SEARCH_EVENT,searchSide,searchSide,typeStyle,typeStatus,1);
				svg.svgScale = 50;
				svg.addEventListener(MouseEvent.MOUSE_DOWN,svgClickHandler);
				this.addElement(svg);
				
				input = InputView.buildInputView("",searchWidth - searchSide - searchGap*3,32,typeStyle,0,searchPrompt);
				input.labelAlign = InputView.LEFT;
				input.addEventListener(InputView.INPUT_CHANGE_EVENT,inputChangeHandler);
				input.visible = false;
				this.addElement(input);
				
				viewFill.color = viewOut;
				viewFill.alpha = viewAlpha;
				
				viewLine.color = lineOut;
				viewLine.alpha = lineAlpha;
				
				showHandler();
			}
			
			private function positionHandler():void
			{
				switch(searchLayout)
				{
					case SEARCH_LEFT:
					{
						svg.x = this.width - searchSide - searchGap;
						svg.y = this.height - svg.height >> 1;
						input.x = searchSide + searchGap*2;
						input.y = (this.height - input.height >> 1) - 2;
						break;
					}
					case SEARCH_RIGHT:
					{
						svg.x = this.width - searchSide - searchGap;
						svg.y = this.height - svg.height >> 1;
						input.x = searchGap;
						input.y = (this.height - input.height >> 1) - 2;
						break;
					}
				}
				input.visible = isShow;
			}
			
			private function showHandler():void
			{
				if(isShow)
				{
					viewWidth = searchWidth;
					
					viewLine.alpha = lineAlpha;
					viewFill.alpha = lineAlpha;
					this.addEventListener(KeyboardEvent.KEY_DOWN,keyboardHandler);
					input.clickHandler(null);
				}
				else
				{
					viewWidth = searchSide + searchGap * 2;
					
					viewLine.alpha = 0;
					viewFill.alpha = 0;
					this.removeEventListener(KeyboardEvent.KEY_DOWN,keyboardHandler);
				}
				positionHandler();
			}
			
			private function keyboardHandler(evt:KeyboardEvent):void
			{
				if(evt.keyCode == 13)
				{
					searchHandler();
				}
			}
			
			protected function inputChangeHandler(event:Event):void
			{
				
			}
			
			protected function svgClickHandler(event:MouseEvent):void
			{
				MouseUtils.stopMouseEvent(event);
				searchHandler();
			}
			
			private function searchHandler():void
			{
				if(isShow)
				{
					if(searchInfo == "")//-FORSHOW
					{
						isShow = false;
						showHandler();
					}
					else
					{
						this.dispatchEvent(new Event(SearchEvent));
					}
				}
				else
				{
					isShow = true;
					showHandler();
				}
			}
			
			public function get searchInfo():String
			{
				if(input == null)
				{
					return "";
				}
				return input.inputText; //+ "-FORSHOW"
			}
			
		]]>
	</fx:Script>
	
	<s:Rect width="100%" height="100%"
			topLeftRadiusX="{topLeftRadius}" topLeftRadiusY="{topLeftRadius}"
			topRightRadiusX="{topRightRadius}" topRightRadiusY="{topRightRadius}"
			bottomLeftRadiusX="{bottomLeftRadius}" bottomLeftRadiusY="{bottomLeftRadius}"
			bottomRightRadiusX="{bottomRightRadius}" bottomRightRadiusY="{bottomRightRadius}">
		<s:fill>
			<s:SolidColor id="viewFill" color="0" alpha="0"/>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke id="viewLine" color="0" alpha="0"/>
		</s:stroke>
	</s:Rect>
</s:Group>
