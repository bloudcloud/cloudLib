实例1：
创建一个类似智能家居的万能遥控器，控制各种家电。
我们需要将“请求”封装成对象（一个命令对象通过在特定接收者上绑定一组动作来封装请求），
以便使用不同的请求、队列、或者日志来参数化其对象—这就是命令模式。命令模式可以用于工作队列和日志操作等方面。
调用者直接调用了命令类，命令类完成了接收者的工作。
调用者(客户) - Main1类
命令对象(用来封装请求及封装了接收者功能) - Command类的对象
接收者(请求具体执行者) - Light类

1. 命令模式的概念
   命令模式将一个请求封装为一个对象。这样你可以向客户端发送不同请求的参数，排队或记录请求，同时可以支持不能执行的请求。
   在软件中不同的模块、对象之间经常会各种调用，或者我们称之为请求。传统的方法，我们将请求实现为函数调用。 
   这样做是最简单的方法，但却在无形之中增加了模块之间的耦合度。当请求发生很大变化的时候，系统将变得很难维护。
   与此同时当服务端（接受请求的一端）增加或者删除一个请求的时候，按照传统的方法，客户端(发送请求的一端)也必须重新
   编译（这一点在删除请求的时候最明显），这样系统才能正确运行。
   使用命令模式的一个核心思想就是，服务端提供一个统一的请求处理接口，客户端则通过调用接口向服务端发送请求，
   这些请求被封装成对象的形式(或其等价形式)。在《设计模式》中，“四人团”并没有强调统一接口的事情，它强调了另一个方面，那就是封装请求。
   事实上封装一个请求总是要求有一个地方来接受和处理这个请求的，这个地方实际上就是统一请求接口。
   在《设计模式》中，请求被封装成一个Command对象，这个对象保存着请求类型、参数等信息，
   服务端收到这个命令后就会执行Command对象中的execute()函数，这个函数具体实现了真正的操作。
   这种实现方法可以保证增加新的请求而不必重新编译服务端。
   命令模式的另一个形式就是在服务端实现各种操作，Command对象只是负责指明请求的类型，这样当服务器端发现请求不正确时，可以忽略该请求。
   和上一种形式相比，这种形式更加简洁(因为可以不真正实现Command对象，在C++中可以使用不定参数实现)，但是缺少灵活性。
   命令模式使得记录请求成为了可能，我们可以捕获系统中的请求对象，记录他们。
   
   在前几天的策略者strategy pattern中，使用接口抽象化经常变化的方法来实现运行时动态变化，它把“方法”又封装成一个包，
   让使用方法的命令者完全和执行动作解耦，也就是做到你说你的，我不管你说啥，直接扔给要做的人，要做的人就会根据要求返回结果。
   这种方式给了我非常开心的启示，也有更多的“迷茫”。一切兼可抽象，抽象的抽象……
   以head first design pattern的原例，描述command pattern模式：将“请求”封装成对象，
   以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。
   在本例中，已经实现了将所有的操作存储在一个队列里，实现逐步撤销功能，类似PS中的Ctrl+Alt+Z的功能，
   可以给队列的长度定义一个数值，以支持可以撤销多少步。如果你看过我之前写的startegy pattern,
   寻么就可以更好的理解这一“迷”人的模式，走到这一步，离大名鼎鼎的MVC复合模式越来越近了。
   
 何谓命令？如顺时针旋转20°的命令、逆时针旋转20°的命令、缩放0.1的命令、又或者是游戏当中的执行命令等。
 又或者明白点，叫人去关窗的关窗就是命令。而在命令模式当中呢，最起码应该有的就是命令咯。也就是command。
 （← 我终于认识这个单词了！英文差又懒得查的孩子伤不起！之前在一些资料上看到它，真心不知道是干嘛的。
 而且就算是看了解释也不懂！哎。）好吧，继续说命令模式，它除了有命令之外呢，还应当有调用者，以及接收者。
 像之前说的例子里，旋转的命令，是谁要旋转？什么时候旋转？通常，我们可以给一个按钮，当点击的时候，
 就旋转（也就是执行该命令），那么这个按钮就是命令的调用者。那么谁去接收这个命令呢，也就是谁旋转呢，
 假设是一个图形发生旋转，那么也就是说这个图形是这个命令的接收者。
 又如：我叫他去关窗。我是调用者，关窗是命令，他是接收者。大概是这么一个功能。

命令模式优点：把调用者、命令请求、接收者拆开了，这样可以可以使代码变得很灵活。
因为这样可以随时更换调用者、或者更换命令、或者更换接收者。就像是这次我想叫这个人去关窗，下次我想叫另外一个人；
又或者这次我叫这个人去关窗，但是下次我想叫他去关门；再或者不是只有我才能叫人干这些事，别人也能叫。
接下来就说一下怎么用代码去实现该模式。命令模式有五要素：命令接口、具体命令、接收者、客户、调用者
① 命令接口。所有命令所要实现的接口，保证了同一接口便可以实现各个命令之间的互换了。接口一般只有execute()方法用以请求命令。
② 具体命令和接收者。具体命令实现上述接口。该命令的具体操作，也就是上面例子的旋转啊、关窗啊什么的，
   具体是怎么实现的就写在execute()的方法里。命令模式把这些功能的实现封装了在命令类里面。
   而接收者呢，一般把接收者的引用通过具体命令的构造函数进行传递。
③ 客户和调用者。“客户就是命令对象的实例对象。调用者就是调用命令对象的execute()方法的对象。
   一般而言，客户就是系统的main类，而调用者只是一个按钮。在不同场景下具体的客户以及调用者并无确切的定义。
   有时客户和调用者就是同一个对象。本质上客户就是把命令new出来的那个类的实例。

关于命令模式的简单介绍就差不多是上面这些了吧。模式易于理解却难于实现。
模式不过是一种解决问题的思想，但是要真正的与实际情况结合起来以达到最优的效率，还是需要仔细去斟酌的。
