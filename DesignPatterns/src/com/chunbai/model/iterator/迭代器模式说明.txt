Iterator模式：这个模式试图隐藏集合的内部表示，又同时可以使用户依次访问集合中的元素。
现在STL和Java的跌代器就是应用这个模式的结果。


使用迭代器模式可以在保持良好封装性的前提下，不必展示数据结构就可以对集合元素进行迭代。、
迭代器模式将迭代的功能转嫁给另外一个新对象，这样集合类就非常简单，我们可以多次同时对集合进行迭代。
迭代器模式有以下几种组成元素：
迭代器接口：用于对集合数据进行迭代的接口。
具体的迭代器：迭代器接口的实现。
集合接口：如何收回迭代器的接口定义。
具体集合：集合接口的实现。

几乎每个系统都需要使用到数据集合。集合也就是一个有组织的数据群体。
ActionScript拥有很多数据集合，既包括数组、关联数组、这样的标准类型，也包括多维数组以及定制集合数据类型。
使用集合时，我们需要存储或者访问集合中的每一个组成元素。
迭代器模式就是用于完成这样的任务，同时避免存取数据时容易存在的一些问题。

使用迭代器方式，客户端可以不必知道集合数据的数据结构而直接对这些数据进行读写操作。
迭代器模式为读集合数据提供了一个标准接口。
迭代器模式非常简单也非常实用，其实正是简单性实用使其广泛应用。迭代器模式标准化了访问集合数据的方式，
因而我们可以创建迭代器接口而不用具体实现。这样代码可以更灵活，更具有适应性。

所谓迭代器，就是用以完成遍历数据集合的工具。迭代器提供了遍历数组的方法，也就是说把之前遍历数据集合的这一部分抽出来，单独成类，
而数据集合则通过参数由迭代器的构造函数传入。使用迭代器的好处在于保持类良好封装性的同时对集合元素进行循环操作。
既一来不需要把数据集合展现给外部对象，因为如果不用迭代器，外部对象会通过getter方法获取该数据集合然后再对它进行遍历，
这样的情况下就把整个数据集合公开了并且外部对象可以直接改变数据集合。
二来如果不使用迭代器，对象需要遍历获得的数据集合的时候需要知道数据结构，
也就是说还要分析下它的数据结构才能够进行迭代代码的书写，
这样如果下次需要修改数据结构的时候，代码的修改会变得困难。

那么如何构建一个迭代器呢？迭代器的元素有四个 ↓↓
① 迭代器接口：用于对集合数据进行迭代的接口。↓
② 具体的迭代器：迭代器接口的实现。↓
③ 集合接口：如何收回迭代器的接口的定义。↓
④ 具体集合：集合接口的实现。↓
在以上迭代器接口以及集合接口的具体实现中，都是根据具体情况的需要来编写代码，它们只是保证公共的接口以实现公有的功能。
这样的话可以很方便的实现同一数据集合不同类型的迭代，也就是不同的遍历方法，
只需要通过同一接口并且输入迭代类型便可请求不同的迭代器。并且这些遍历的方法都在迭代器内部实现了，因此就不用去更改对象中的for循环等。
那么迭代器构建完成了要如何使用呢，且看 ↓↓
好吧，我又觉得这个挺好用的。 哈哈。以上只是简单的把何为迭代器描述了出来，具体的可以根据实际情况需要去丰富它。
迭代器模式标准化了访问集合数据的方式，使得代码可以更灵活，更具有适应性。