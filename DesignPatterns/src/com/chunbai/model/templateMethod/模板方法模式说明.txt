模板方法(Template Method)模式是基于继承的代码复用思想，其结构和用法也体现了面向对象程序设计的核心。
模板方法模式的结构由抽象类(Abstract Class)和具体子类(Concrete Class)两部分组成。
抽象类就像一个模板，给出了一个对象的轮廓和骨架。
它包含一些基本方法(primitive method)，但并没有具体实现，就像接口Interface一样，
这些基本方法由具体子类来实现。
抽象类还包含一个将这些基本方法集合起来的方法，叫做模板方法(template method)，由此而产生了模板方法模式。

AS3中的抽象类(Abstract Class)
抽象类无法实例化instantiate，只能扩展extend。
与接口Interface只定义公开方法名而不实现不同，抽象类定义了接口和实现。
我们接触的一些as3的内置类，如DisplayObject就是抽象类。
AS3并不支持抽象类，但是我们还是可以使用抽象类和和抽象方法的思想。
在C#/Java等语言中可以使用abstract关键字定义抽象方法，这样子类必须覆盖这些抽象方法。
但是AS3中没有abstract关键字，因此我们可以在抽象方法里抛出错误的方法，
这样如果在运行时runtime调用抽象方法就会抛出一个错误，但可以编译通过。

Template Method模式的意图是：“定义一个操作中的骨架，而将一些步骤延迟到子类中。
这使得子类可以不改变一个算法的结构即可以重定义该算法的某些特定步骤。
这一模式和Strategy模式似乎和相似，但是他们的关注点不同。
策略模式主要用于算法的替换，但是模板方法模式主要用于算法中特定步骤地替换。
一个应用模板方法模式的例子是数据库操作。对于数据库操作可以有很多中，
比如查询、更新。查询又可以分为连接数据库、发送请求命令、解析结果等等步骤。
对于不同的数据库，比如Oracle和SQL2000，它们连接数据库、命令格式可能有所不同，
但是就查询和更新着两个操作来说它们的步骤是相同的。这个时候，我们可以应用模板方法模式，
为查询、更新操作建立一个抽象的算法，具体的步骤交给子类来实现。如果对于策略模式，我们替换的将是查询和更新着两个操作。
但将Template Method模式和Strategy模式进行类比是危险的，
这两个模式有着很多重要的不同，但这些不同却又是十分的细微，只能意会不能言传。

