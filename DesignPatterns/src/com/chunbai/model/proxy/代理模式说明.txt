代理模式提供给我们一种最常见的编程任务的解决方案.一个代理就是一个类,并且它支持到另一个对象的访问.
而这另外的一个对象并不一定是ActionScript对象.
它可以是一个图像文件,XML文件,Flash Remoting服务或者WEB对象.代理模式分为很多种,书中主要讲了两种:
虚拟代理和远程代理.


可能我们不是每个人每天都想吃饭，所以我们要求猴子每天中午必须在寝室，如果我们要吃，他就去，如果我们都不吃，他爱干嘛干嘛。 
举例：这恐怕是每个人在flash里都会无意中用到的模式。比如，一个网站，它的下级栏目不用在整个网站初始化的
时候一开始就读进来，但是我们要确保，在浏览者想看并且点击导航条上的某个按钮时，能够正确地读进相应的影片文件，
前提是，我们必须在内部保留一个索引，可以称作代理。通常是一个空mc。

1.  虚拟代理(实例1)
	虚拟代理用于代理那些创建代理昂贵(例如内存)的对象以及立即使用的对象.知道它被需要的时候,虚拟代理才进行实质的创建或者初始化构成.
	在主题创建之前或者正在创建的过程当中,虚拟代理一致代替该对象.直到创建过程结束,它会删除对该主题的直接请求.
	AS3中Loader就是一个虚拟代理类,在用Loader加载图片时,可以先将效果加在Loader上.等图片加载完毕,Loader将图片赋给自身的一个变量,
	然后将图片加载器删除,然后将效果应用在上面.

2.	远程代理(实例2)
    远程代理也用于代替一个对象，只不过它代替的一般是远程对象。它可以是和代理分离的SWF文件、Flash Remoting服务、
    SOAP或者REST服务以及其他任意类型的服务。
    相对于远程对象，远程代理就扮演者着一个本地的角色。它拥有和远程对象一样的公共方法作为远程资源，
    代表对该资源的请求，它还负责与远程资源的通信。
    
3.  适配器模式和Facade模式与代理模式非常相似。最主要的不同就是代理类和它所代理的对象拥有相同的公共方法（拥有一样的接口）。
    而适配器模式和Facade模式之间的区别就是，适配器模式用于转换对象的API,而Facade模式用于简化对象的API.
    书云：一个代理就是一个类，并且它支持到另一个对象的访问。而这另外一个对象并不一定是ActionScript对象。
    它可以是一个图像文件、XML文件、Flash Remoting服务或者Web服务。

    代理模式不同于适配器模式和Façade模式 （ç ← 这个也能打出来，搜狗还是强大的呀！）。
    传说这几个模式很容易搞混，但是我没用过，所以对此没有发言权。它们之间的区别是，代理模式和所代理的对象具有相同的API或者接口，
    而适配器模式用于转换对象的API，而Façade模式用于简化对象的API。最常用的两种代理方法是远程代理和虚拟代理。以下说说这两种代理方法。

    虚拟代理 ↓↓
    我的理解是可以处理一些问题，例如，有时候需要用一个对象，可是等不及它加载或者创建或初始化代价太大。
    会不会有点难懂？其实我也觉得文字很生硬难懂，且接着看吧。举个很简单的例子，就是Loader。
    Loader其实就是一个图像的虚拟代理器。这代理器有什么用呢？就像要加载一张图片，然后要对这张图片进行处理，如加滤镜、调位置什么的，
    可是这时候图片还没加载完，也就是拿不到那张图片，那这些处理怎么办？
    如果用Loader的话，我们是可以直接对Loader加滤镜、调位置、addChild(Loader)而不用去考虑这图片是否加载完成了。
    这个就是代理器的功能。它相当于代理了这张图片去接受这些处理。
    （← 且请暂时忽略一般不直接在Loader上搞这个搞那个的问题，这里只是用以说明代理器的功能。）
    其实个人认为代理功能很多是在处理异步加载的问题，当然也不全是，接下来要说的虚拟代理的另一种用处就不是。且看 ↓ 

    惰性序列化。← 哈哈哈哈。这个是不是很难理解。我也觉得，只是书上是这样写我便提一下。
    那加载XML，解析XML都知道吧，就是把加载好的XML一个个元素存到模型里咯（就是所谓序列化）。
    当XML非常巨大的时候，这个工作就很烦，而且还不知道解析出来的东西是不是都有用，而且运行时还花时间和资源。
    而虚拟代理器就可以解决这个问题，可以根据需要去序列化对象的属性，也就是当需要用的时候再把要的东西解析出来（也就是所谓惰性）。
    作用大概就是这样，具体应用的话还不好说明，且看案例。

    远程代理 ↓↓
    远程代理即代理远程对象了。远程对象可以是和代理分离的SWF文件、Flash Remoting服务、SOAP或者REST服务以及其他任意类型的服务
    （← 以上服务我均木有接触过，暂且记下…）。远程代理器代表了对所代理资源的请求，以及负责和远程资源通信。
    书上的示例是代理了一个远程的共享站点，代理器可以用以搜索远程资源以及远程图片代理。过程大概是，代理器接收请求，
    然后与远程通信，结束后抛出事件。这个例子当中我获益最深的是Proxy的callProperty()。
    到现在为止，对于Proxy只接触了getProperty()和callProperty()。暂时只理解到前者用以调用未定义属性，而后者用以调用未定义方法，
    都是通过覆写flash_proxy命名空间里的方法实现。还有用这个的时候都要把继承Proxy的类设置为动态类。
    也就是要加那个快被我忘记的关键字 → dynamic 。

    我觉得代理模式应该还挺好用的。鉴于之前都没有做过大项目还有远程通信什么的，因此也就不会有这方面比较大的困扰。
    我想，在运行时的异步加载时应该挺好的吧？这些都有待日后验证了。

    按照“四人团”的说法，Proxy模式可以为控制另一个对象而提供一个代理或者占位符。
    这个模式可以使我们在真正需要的时候创建对象，如果我们不需要这个对象，Proxy模式会为我们提供一个占位符。
    如果我们有大量这样消耗很大的对象的时候，我们就可以使用Proxy模式，初始情况下，Proxy模式
    只会提供占位符而不会真正创建对象，但是对于使用者来说，他看到是真正的对象而不是一个代理。
    一旦使用者需要获得或者更改对象属性的时候，Proxy模式就会创建该对象，在此之后，我们就可以通过代理访问真正的对象了。
    在Word里面应该是使用了Proxy模式。打开一篇含图的很长的文档时，大部分的图片都不会被载入，
    而仅仅是提供占位符，只有当用户准备察看这一页的时候，代理才会真正载入图片。
    和Singleton模式一样，Proxy模式都是保证我们可以按需分配对象，不同的是，Singleton模式还会保证在
    全局范围内使用同一个对象实例，而Proxy则没有这个功能。
    