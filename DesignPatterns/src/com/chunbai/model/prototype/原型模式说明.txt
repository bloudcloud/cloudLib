实例1基于.NET语言改编

再回来看看今天的Prototype原型模式，它是用来解决“某些结构复杂的对象”的创建工作。
现在看看，好象还是差不多。这个问题先放在这，我们先往下看Prototype原型模式。
《设计模式》中说道：使用原型实例指定创建对象的种类，然后通过拷贝这些原型来创建新的对象。
此时注意：原型模式是通过拷贝自身来创建新的对象，这一点和其他创建型模式不相同。好，我们再来看看原型模式的结构
       这个结构说明原型模式的客户端程序（ClientApp）是依赖于抽象（Prototype），而对象的具体实现也是依赖于抽象（Prototype）。
       符合设计模式原则中的依赖倒置原则——抽象不应依赖于具体实现，具体实现应依赖于抽象。
       我们现在回来看看原型模式的实现，我定义了一个场景，一个人开这一辆车在一条公路上。
       现在这件事是确定的，但不确定的有几点：1、人：姓名，性别，年龄；2车：什么牌子的；
       3公路：公路名字，长度，类型（柏油还是土路）。现在我们一个个实现。
       
原型模式根据语言特性 多数使用clone方法底层实现
