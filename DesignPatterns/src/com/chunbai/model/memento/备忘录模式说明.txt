备忘率模式用于在不破坏封装性的前提下，将对象的当前状态保存下来。有些时候，需要保存一些对象的当前状态，
例如，有一个圆，当点击它的时候它会改变颜色和大小，我希望按左键可以回到上一个状态。
这个时候就会需要保存这个球的状态，以便需要恢复到该状态。

    备忘录模式有3个基本元素：备忘录（memento）、原发器（originator）和负责人（caretaker）。
    备忘录就是备份，用以保存原发器的状态，像之前举的圆的例子，在备忘录里就只需要保存它的颜色和半径，
    只要保证保存的东西最后可以让原发器恢复原样就可以了。因此，备忘录相当于一个数据模型，只用于保存一些必要的数据。
    那么在哪里什么时候保存这些数据呢，也就是生成备份呢？通常在原发器（也就是这个圆的类）中，
    会含有生成备忘录（getMemento()）以及根据备份重新设置状态（setMemento()）的方法。
    那么只需要在需要的时候，由该圆的实例调用生成备份的函数，那么就会返回该圆的备份。
    那么当需要这个圆恢复某一状态的时候呢，只要把该状态的备份通过参数传递给圆的实例的setMemento()方法就可以了。
    最后就是负责人了，负责人就是用来保存这些备份的。把生成的备份让负责人保存管理着，当需要某备份的时候再去跟负责人要。

    以下是该模式的说明案例的代码，也许看了会更清晰些。
    ① 备忘录（memento）
    ② 原发器（originator）
    ③ 负责人（caretaker）
    以上代码省略了部分。备忘录对于在一些可恢复性操作的时候还是挺有用处的。
    通常会和上一章的命令模式联合着使用，命令模式发出撤销指令，然后取出相应的备忘录，然后重新更改数据状态便可。
备忘录模式与原型模式类似，它主要是把自身的状态副本交由专门的第三方类来管理，以封装隐藏细节的实现