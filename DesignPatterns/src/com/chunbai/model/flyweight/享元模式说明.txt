ActionScript3.0实现“享元模式（Flyweight）”，“享元模式”可以避免大量非常
相似类的开销（五子棋游戏、怪物、UI等），内部状态与外部状态区别：
 Flyweight模式（享元模式）
这个模式利用共享有效的支持大量的细粒度的对象。比如，编辑软件中，一篇文章有很多个字符，
我们可以对每个字符对象生成一个对象，如果这篇文章有几M个文字，那么对象的数量肯定是不能容忍的。
使用Flyweight模式，我们将所有的文字对象共享起来，文章中的字符仅仅是指向共享池中的某个对象的索引。
在这里要搞清楚一件事情，利用Flyweight模式不会有效地减少信息的数量（也就是软件的空间开销），
因为无论是否共享，表达这么多信息所需要的编码数量是一定的，所以开销不会大幅减小。
只是，这个模式会减少系统中对象的数量，因为大量的对象会被共享。
在编辑软件中，字符对象被共享，那么一篇文章中的文字，可以按照段落、格式等等进行结组，
一组文字构成一个对象，这样对象从单个文字变成一组文字，数量大幅减少。
在使用Flyweight模式需要注意的一点，由于对象被共享了，因此这些对象没有各自的属性，
那么根据上下文环境，我们在使用这些对象的时候，必须向它传递一些参数。在编辑软件中，这些参数可能就是字体、字号、颜色等等信息。
使用Flyweight模式还有一个好处，那就是我们可以在不修改系统的情况下增加享元。

先说明下,
Flyweight模式,一般我们管它叫"享元模式",是把大量共享的对象收集在一起使用简单工厂模式进行管理，避免由于大量的小对象导致系统的内存过渡消耗.

Flyweight核心思想在于共享，如果Line的创建过程很费资源，那么楼主的设计是有意义的，可以节省创建开销；
内存方面，除非flyweight里存储的资料会被持续使用，否则是没有意义的。

其实Flash中大量使用Flyweight，Flash机制很注重复用性。在Flash中，一个显示对象只能有一个parent，
如果要画多个显示元件，这些元件必须是独立对象，不能共享使用，如果实际图片数据也存储在显示元件中，
势必实际图片数据会变成很多份，浪费大量内存；因此Flash设计了BitmapData对象，来存储真正占内存的实际图片数据，
而显示元件通过引用BitmapData来实现显示功能，让一份内存数据能够给多个显示元件使用，这才是Flyweight的含义。

不太一样哦！单例模式的用处不是为了“共享”，而是为了“唯一”，单例模式会禁止用户创建对象，只能通过静态方法获取唯一实例，
主要是用于一些必须只有唯一实例的强大对象，避免两个对象产生冲突；享元模式则没有这些限制，
只是提供使用者一种机制，让使用者自己吧共享的东西存储起来

在游戏中，Flyweight有很多应用。比如每个玩家身上都有许多道具，吃的喝的用的，每个道具都有很多属性，
包括图片等等（总之就是很大很占内存）；如果这些道具都在玩家身上存储独立对象，那么系统容量会随玩家数量上升而急剧膨胀。
比较好的做法是使用flyweight模式，把所有种类的道具都new一个存在一个列表之中，用户身上只记录道具序号，显示和使用的时候再去查找。
一个游戏中的静态道具通常不过几百个而已，而一个用户身上能携带的数量就可能达到几百，数千人同时在线时，
使用flyweight比用户直接存储独立道具对象要节省很多。
具体例子……时间有限就先不写了，flyweight其实是一个很容易实现的模式，关键是掌握它的用途，把它用在有意义的地方。

点内存池的味道
不过内存池是存放对象,并不是拿来共享的
加载进来的图片,BitmapData是共用,这是非常不错的
享元模式（英语：Flyweight Pattern）是一种软件设计模式。
它使用共享物件，用来尽可能减少内存使用量以及分享资讯给尽可能多的相似物件；
它适合用于当大量物件只是重复因而导致无法令人接受的使用大量内存。通常物件中的部分状态是可以分享。
常见做法是把它们放在外部数据结构，当需要使用时再将它们传递给享元。 　　
典型的享元模式的例子为文书处理器中以图形结构来表示字符。一个做法是，每个字形有其字型外观, 
字模 metrics, 和其它格式资讯，但这会使每个字符就耗用上千字节。取而代之的是，每个字符参照到一个共享字形物件，
此物件会被其它有共同特质的字符所分享；只有每个字符（文件中或页面中）的位置才需要另外储存。
以下程式用来解释上述的文件例子。这个例子用来解释享元模式利用只载立执行立即小任务所必需的资料，因而减少内存使用量。
　 
东西不够吃？给你摆20面镜子~
师傅，东西还是只有一份。。。 
关于这个模式十分抱歉，我暂时还没想到在flash显示层里面的实现。需要举例说明的是，浏览器的机制是，
在有大量文字的英文文档里，相同的字母共享一个 Flyweight，在内存里其实只占一份空间，然后在文档不同的地方显示，
这样对于大量细粒度的效果来说，可以节省很多资源。在下层，我们可以做到的就是，对某个全局对象只在某处真正保存，
任何对象想要这个全局对象，只引用它而不复制它。

在显示层里有哪位想到了该怎么做请一定赐教。
