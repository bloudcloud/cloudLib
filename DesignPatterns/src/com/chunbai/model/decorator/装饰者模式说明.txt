OO与设计模式－Decorator星巴咖啡店
Decorator装饰者模式是一种思想，并非最终解决方案，当然也有个例，在固定的被装饰的范围内可以使用此模式做一些应用，
但由于Decorator是依赖继承实现的解决方法，所以当需要装饰者数量很大的时候，此模式就会产生类爆炸，
那时候就是工厂模式来解决这个问题，现在仅仅了解Decorator的思维特点，问题：
咖啡店里有很多搭配，如黑咖啡、普通咖啡(被装饰者)，同时它们还会添加一些冰块、糖（装饰者），最后统一结果打出价格，
因为调料添加是不固定的，所以他们的组合也是不固定的，现在使用Decorator来解决这个问题。

书上说：使用装饰器模式，我们可以在运行时将新行为应用到对象上。← 好吧，这个，反正以我的智商是觉得很抽象啦。
对于装饰器模式，我的理解是：首先有“人”这个类，然后呢，我希望还有“拿着螺丝刀的人”这个类，也就是我想让这个人有扭螺丝的功能咯，
又或者我想要一个“拿着扳手的人”这个类，还有“同时拿着螺丝刀和扳手的人”的类，如此如此。
书上说照惯例，大多数人会选择继承的方法，也就是建一个“人”，然后再建一个“拿着螺丝刀的人”继承于“人”，
如此类推（← 是书上说大多数人会用继承哦，这个我不是很清楚的，因为没经验，又菜，所以，错了就且请勿怪啦）。 
而装饰器模式呢，将会以组合而不是继承的方式来实现。用继承的两个主要弊端 ↓↓

① 不能在运行时更改对象的行为。就像有个拿着螺丝刀的人，你不能让他丢掉螺丝刀，然后拿起扳手。
你只能够重新new一个拿着扳手的人（就是重新叫一个人来）。

② 随着交换次数的增加，需要对类得数量进一步管理。其实就是上一点所说的，不能够做到一个人完成扭螺丝、扳扳手等功能。
你需要叫很多人，一个人扭螺丝、一个人扳扳手等如此类推。因此需要管理的类就多了很多，不便于管理。

而使用装饰器则可以解决上述问题。关于装饰器的这一章内容也还是挺多的，我也纠结了很久不知道该怎么整理，
最后总结了个大概，也不知是否准确，且请自行判断。 → 装饰器，也就是上面所说的工具（功能），如螺丝刀、扳手等。
而装饰器模式到底可以实现什么功能呢？总体来说可以实现一个人这时候拿着螺丝刀扭螺丝，等一下拿着扳手扳扳手，
再等一下那个螺丝刀和扳手一起工作，如此类推。而这些螺丝刀和扳手呢，就是装饰这个人的。也就是这个人是被装饰的，
书上称“装饰”（← 这个我觉得一下就搞混了。  ），而螺丝刀和扳手什么的就是装饰器了。
装饰和各个装饰器各自成类，不过他们均实现同一接口。以上知道了什么是装饰和装饰器了（也就是例子中的人和各工具咯），
接下来就是怎么样让他们协调工作了。首先，装饰器模式有4部分组成 ↓↓

① 装饰器/装饰接口。也就是装饰（人）和装饰器（工具）都要实现的接口，
说白了，就是这个装饰器模式里面所有的类都要实现的接口。
② 具体的装饰类。也就是人这个类。这个人（装饰）除了要实现上面所说的接口之外，还可以写别的关于这个人的东西，
例如说这个人可以吃饭、走路什么。因为以上举的装饰器模式例子是人用这些工具去工作，
而跟这些工作有关的一般都会保证他们有相同的接口，那么无关的，就像刚刚说吃饭、走路什么的就不必实现公共的接口，
只要把它写在人这个类里面就行了。

③ 抽象装饰器类。这个，顾名思义啦。抽象装饰器类同样实现上面第一点的接口，另外一般包含大多数装饰器的基本功能。

④ 具体装饰器类。继承于抽象装饰器类，通过重写方法得到具体行为的实现，例如螺丝刀怎么拧螺丝。

以上可以看到被装饰的对象是通过参数传递给装饰器，以实现组合。例如，首先先new了个人，就是叫了一个人，然后再new一个装饰器，
如new了一个螺丝刀，并且把之前new的人通过参数的形式传递给这个new出来的螺丝刀，相当于把一把螺丝刀给了这个人，
于是这个人就变成了拿着螺丝刀的人了，他可以扭螺丝。下次想他用扳手，就new一个扳手，再把他传给扳手就可以了。
那么如何让这个人同时拿着螺丝刀和扳手工作呢？
这个只要把拿着螺丝刀的那个人（其实是new出来的螺丝刀的实例）传递给new出来的扳手就行了。
或者这样写好理解些
 → 人 = new 人();→ 拿着螺丝刀的人 = new 螺丝刀(人);→ 拿扳手的人 = new 扳手(人);→ 拿着螺丝刀和扳手的人 = new 扳手(拿着螺丝刀的人);
 [或者：拿着螺丝刀和扳手的人 = new 螺丝刀(拿扳手的人);]。他们各个类可以互换是因为他们都实现了共同的接口 IWeiget。
 然后用的时候只要把拿着工具的人.run();就OK了。
 当然咯，具体的工具里面具体的run()的实现又是不一样的，这个在写具体装饰器类得时候重写run()就可以了。

上面只是简单的介绍了装饰器模式大概是个什么样子的。在具体使用的时候要根据实际情况使用装饰器。
有时候会出现不是你想要的效果，例如有一个拿了螺丝刀的人，你想让他去钻孔，那他只能够放下螺丝刀，
拿起钻头（钻头要双手使用），也就是不能够把拿着螺丝刀的人当成参数传给钻头，只能是把人传给钻头；
还有就是上面说的扳手和螺丝刀是可以同时使用的，可是当你把拿着螺丝刀的人传给锤子的时候，
也就是一个人拿着螺丝刀和锤子的时候，他一般只能扭螺丝或者锤钉子，而不能同时使用这两个工具，
也就是说，当你把螺丝刀人传给锤子，那这个人这时候可以锤东西，但是不能扭螺丝，尽管他拿着螺丝刀，反之亦然。
（← 以上例子请自行忽略牛逼之人，如可以同时钻孔和扭螺丝的。）说白了就是要根据实际的需要去选择装饰器，
以及被装饰的对象，而且还要注意加装饰器的顺序。这些都可能影响到最后的实现效果。

这个，到这里就完了，没有被我搞晕吧？  看晕了请忽略，或者看原著。嘻。书上所举的例子是不一样的，而且有两个，
分别说了两种情况，可自行参考。使用装饰器最大的好处就是可以在运行时添加、更改行为，并且行为可成链而不用编写新的子类。
有点把它们拆成一个个，要用的时候根据需要组合起来的意思。这个，我咋觉得怎么说怎么不对劲呢？哭。还是看案例吧。 

 按照“四人团”的说法，Decorator模式的意图是：动态的给一个对象添加一些额外的职责。
 值得注意的是，这个对象不知道他增加的是什么职责。
这个模式的一个典型应用实例是：Java的流。一个文件流（Java.IO.File）用于读写文件，
如果你想使用文件缓冲，你可在为File添加一个BufferedInputStream或者BufferedOutputStream外观，
这样这个文件流就具有了缓冲。再如一个Reader类，你可以给他增加缓冲BufferedReader，然后你还可以给这个缓冲流增加一些格式化读取的能力。
    Decorator模式可以动态的增加对象的额外的职责，这也有利于将额外的功能分别实现，使得用户可以自由组合。

装饰者模式 
Decorator模式（别名Wrapper）：动态将职责附加到对象上，若要扩展功能，装饰者提供了比继承更具弹性的代替方案。 
意图： 
动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。 

设计原则： 
1. 多用组合，少用继承。 
利用继承设计子类的行为，是在编译时静态决定的，而且所有的子类都会继承到相同的行为。
然而，如果能够利用组合的做法扩展对象的行为，就可以在运行时动态地进行扩展。 
2. 类应设计的对扩展开放，对修改关闭。 
要点： 
1． 装饰者和被装饰对象有相同的超类型。 
2． 可以用一个或多个装饰者包装一个对象。 
3． 装饰者可以在所委托被装饰者的行为之前或之后，加上自己的行为，以达到特定的目的。 
4． 对象可以在任何时候被装饰，所以可以在运行时动态的，不限量的用你喜欢的装饰者来装饰对象。 
5． 装饰模式中使用继承的关键是想达到装饰者和被装饰对象的类型匹配，而不是获得其行为。 
6． 装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型。在实际项目中可以根据需要为装饰者添加新的行为，做到“半透明”装饰者。 
7． 适配器模式的用意是改变对象的接口而不一定改变对象的性能，而装饰模式的用意是保持接口并增加对象的职责。 
适用性： 

以下情况使用Decorator模式 
1. 需要扩展一个类的功能，或给一个类添加附加职责。 
2. 需要动态的给一个对象添加功能，这些功能可以再动态的撤销。 
3. 需要增加由一些基本功能的排列组合而产生的非常大量的功能，从而使继承关系变的不现实。 
4. 当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。
另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。 
优点： 
1. Decorator模式与继承关系的目的都是要扩展对象的功能，但是Decorator可以提供比继承更多的灵活性。 
2. 通过使用不同的具体装饰类以及这些装饰类的排列组合，设计师可以创造出很多不同行为的组合。 
缺点： 
1. 这种比继承更加灵活机动的特性，也同时意味着更加多的复杂性。 
2. 装饰模式会导致设计中出现许多小类，如果过度使用，会使程序变得很复杂。 
3. 装饰模式是针对抽象组件（Component）类型编程。但是，如果你要针对具体组件编程时，就应该重新思考你的应用架构，以及装饰者是否合适。
当然也可以改变Component接口，增加新的公开的行为，实现“半透明”的装饰者模式。在实际项目中要做出最佳选择。 
