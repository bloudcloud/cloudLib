按照“四人团”的说法，Visitor模式的意图为：将元素的操作表示成一种结构。
这样Visitor模式可以使你在不修改元素结构的前提下增加新的操作。
考虑一个链表，我们需要一个求得最大元素的操作，这个操作可能是遍历每个节点，
然后求的最大值。这个时候我们又需要一个为每个元素加1的操作，这个操作还需要遍历每个节点，
同时将每个元素加1。与之类似，还会有很多其他的针对元素操作，他们的特点都是要遍历链表。
这个时候可以使用Visitor模式，结点类负责依次遍历，并调用Visitor类中的函数，而Visitor类的具体实现则负责完成功能。
这里需要注意的是，Visitor类只能是一个接口，针对不同的操作需要有不同的具体实现，针对不同的具体元素，
需要设计不同的操作。每个元素负责选择自己应该调用的操作，Visitor子类负责实现具体功能。
一个已知的应用是SmallTalk-80的编译器，在编译时，编译器需要建立一棵语法树。在这个时候，
它使用了Visitor模式，针对不同的操作，比如：类型检查、代码生成等操作实现不同的Visitor具体类，
Visitor类中针对不同的节点类型提供不同的操作接口，具体的节点负责选择调用哪种接口，这像是一种回调操作。
只要愿意，我随时都可以跑到哪个窗口打要吃的东西，前提是，我必须跑这一趟。 
举例：我说过，我的所有mc都继承自BasicMovie这个类，但不是我的所有mc都要从后来获取数据库数据。获取数据库数据所要访问的信息，
比如 ip，路径，文件保存在配置文件里，初始化的时候读入内核，并且只有内核那里有一份。
在BasicMovie里加入对这些全局变量的引用是不合适的，因为只有少数mc要用到，
而且由于某些原因我无法再使用桥接模式（我已经有了SubTemplateMovie，不能多继承），所以我用了访问者模式。
BasicMovie.as
    //获取全局变量
    function GetGlobalParam(){
        GlobalParam=_root.objCore.strucGlobalParam;
}如果上级mc不执行这个函数，是不能获取全局变量的，如果要用，就执行。
也就是说，需要的时候，我去访问它。
备注：声明一个visit操作，使得访问者可以正确访问需要的类。

访问者模式（Visitor Pattern）是GoF提出的23种设计模式中的一种，属于行为模式。
据《大话设计模式》中说算是最复杂也是最难以理解的一种模式了。 　

　定义（源于GoF《Design Pattern》）：表示一个作用于某对象结构中的各元素的操作。
它使你可以在不改变各元素类的前提下定义作用于这些元素的新操作。 　
　从定义可以看出结构对象是使用访问者模式必备条件，而且这个结构对象必须存在遍历自身各个对象的方法。
这便类似于Java语言当中的collection概念了。 　　涉及角色 ： 　　1.Visitor 抽象访问者角色，
为该对象结构中具体元素角色声明一个访问操作接口。
该操作接口的名字和参数标识了发送访问请求给具休访问者的具休元素角色，这样访问者就可以通过该元素角色的特定接口直接访问它。 　　
2.ConcreteVisitor.具体访问者角色，实现Visitor声明的接口。 　　
3.Element 定义一个接受访问操作(accept())，它以一个访问者(Visitor)作为参数。
 　　4.ConcreteElement 具体元素，实现了抽象元素(Element)所定义的接受操作接口。 　
 　5.ObjectStructure 结构对象角色，这是使用访问者模式必备的角色。
 它具备以下特性：能枚举它的元素；可以提供一个高层接口以允许访问者访问它的元素；
 如有需要，可以设计成一个复合对象或者一个聚集（如一个列表或无序集合）。 　
 　访问者模式的几个特点： 　
 　访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。 　　
 访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。
 若系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适合使用访问者模式。 　
 　访问者模式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中，
 其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。 　
 
 　适用情况 ： 　
 　1) 一个对象结构包含很多类对象，它们有不同的接口，而你想对这些对象实施一些依赖于其具体类的操作。 　
 　2) 需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而你想避免让这些操作“污染”这些对象的类。
 Visitor模式使得你可以将相关的操作集中起来 定义在一个类中。 　
 　3) 当该对象结构被很多应用共享时，用Visitor模式让每个应用仅包含需要用到的操作。 　
 　4) 定义对象结构的类很少改变，但经常需要在此结构上定义新的操作。
 改变对象结构类需要重定义对所有访问者的接口，这可能需要很大的代价。
 如果对象结构类经常改变，那么可能还是在这些类中定义这些操作较好。
 
 一、引子 
　　对于系统中一个已经完成的类层次结构，我们已经给它提供了满足需求的接口。
但是面对新增加的需求，我们应该怎么做呢？如果这是为数不多的几次变动，
而且你不用为了一个需求的调整而将整个类层次结构统统地修改一遍，那么直接在原有类层次结构上修改也许是个 不错 的主意。 

　　但是往往我们遇到的却是：这样的需求变动也许会不停的发生；更重要的是需求的任何变动可能都要让你
将整个类层次结构修改个底朝天……。这种类似的操作分布在不同的类里面，不是一个好现象，我们要对这个结构重构一下了。 
　　那么，访问者模式也许是你很好的选择。 

二、定义与结构 
　　访问者模式，顾名思义使用了这个模式后就可以在不修改已有程序结构的前提下，
通过添加额外的“访问者”来完成对已有代码功能的提升。 
　　《设计模式》一书对于访问者模式给出的定义为：表示一个作用于某对象结构中的各元素的操作。
它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。从定义可以看出结构对象是使用访问者模式必须条件，
而且这个结构对象必须存在遍历自身各个对象的方法。这便类似于java中的collection概念了。 

　　以下是访问者模式的组成结构： 
　　1) 访问者角色（Visitor）：为该对象结构中具体元素角色声明一个访问操作接口。
该操作接口的名字和参数标识了发送访问请求给具体访问者的具体元素角色。这样访问者就可以通过该元素角色的特定接口直接访问它。 
　　2) 具体访问者角色（Concrete Visitor）：实现每个由访问者角色（Visitor）声明的操作。 
　　3) 元素角色（Element）：定义一个Accept操作，它以一个访问者为参数。 
　　4) 具体元素角色（Concrete Element）：实现由元素角色提供的Accept操作。 
　　5) 对象结构角色（Object Structure）：这是使用访问者模式必备的角色。
它要具备以下特征：能枚举它的元素；可以提供一个高层的接口以允许该访问者访问它的元素；
可以是一个复合（组合模式）或是一个集合，如一个列表或一个无序集合。 
　　来张类图就能更加清晰的看清访问者模式的结构了。
那么像引言中假想的。我们应该做些什么才能让访问者模式跑起来呢？首先我们要在原有的类层次结构中添加accept方法。
然后将这个类层次中的类放到一个对象结构中去。这样再去创建访问者角色…… 

三、举例 
　　本人阅历实在可怜，没能找到访问者模式在实际应用中的例子。
只好借《Thinking in Patterns with java》中的教学代码一用。我稍微做了下修改。 

四、双重分派 
　　对了，你在上面的例子中体会到双重分派的实现了没有？ 
　　首先在客户程序中将具体访问者模式作为参数传递给具体元素角色（加亮的地方所示）。这便完成了一次分派。 
　　进入具体元素角色后，具体元素角 色调 用作为参数的具体访问者模式中的visitor方法，
同时将自己（this）作为参数传递进去。具体访问者模式再根据参数的不同来选择方法来执行（加亮的地方所示）。这便完成了第二次分派。 

五、优缺点及适用情况 
　　先来看下访问者模式的使用能否避免引言中的痛苦。使用了访问者模式以后，对于原来的类层次增加新的操作，
仅仅需要实现一个具体访问者角色就可以了，而不必修改整个类层次。而且这样符合“开闭原则”的要求。
而且每个具体的访问者角色都对应于一个相关操作，因此如果一个操作的需求有变，
那么仅仅修改一个具体访问者角色，而不用改动整个类层次。 

　　看来访问者模式确实能够解决我们面临的一些问题。 
　　而且由于访问者模式为我们的系统多提供了一层“访问者”，因此我们可以在访问者中添加一些对元素角色的额外操作。 
　　但是“开闭原则”的遵循总是片面的。如果系统中的类层次发生了变化，会对访问者模式产生什么样的影响呢？
你必须修改访问者角色和每一个具体访问者角色…… 
　　看来访问者角色不适合具体元素角色经常发生变化的情况。而且访问者角色要执行与元素角色相关的操作，
就必须让元素角色将自己内部属性暴露出来，而在java中就意味着其它的对象也可以访问。这就破坏了元素角色的封装性。
而且在访问者模式中，元素与访问者之间能够传递的信息有限，这往往也会限制访问者模式的使用。 
　　《设计模式》一书中给出了访问者模式适用的情况： 
　　1) 一个对象结构包含很多类对象，它们有不同的接口，而你想对这些对象实施一些依赖于其具体类的操作。 
　　2) 需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而你想避免让这些操作“污染”
这些对象的类。Visitor使得你可以将相关的操作集中起来定义在一个类中。 
　　3) 当该对象结构被很多应用共享时，用Visitor模式让每个应用仅包含需要用到的操作。 
　　4) 定义对象结构的类很少改变，但经常需要在此结构上定义新的操作。改变对象结构类需要重定义对所有访问者的接口，
这可能需要很大的代价。如果对象结构类经常改变，那么可能还是在这些类中定义这些操作较好。 
　　你是否能很好的理解呢？ 

六、总结
　　这是一个巧妙而且复杂的模式，它的使用条件比较苛刻。当系统中存在着固定的数据结构（比如上面的类层次），
而有着不同的行为，那么访问者模式也许是个不错的选择。
 